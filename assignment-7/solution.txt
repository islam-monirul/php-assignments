Solution by Monirul Islam
Created on - 20 March, 2023

** employees table operations:
-------------------------------------------------------------

a -> Write a query to select all columns and rows from the employees table.

    SELECT *
    FROM employees;

explanation: Here in this query, "SELECT *" is used to select all the rows and columns of employees table. The purpose of this query is to show all the employees record from the employees table.


b -> Write a query to select only the name and salary columns of all employees with a salary greater than 50000.

    SELECT name, salary
    FROM employees
    WHERE salary > 50000;

explanation: Here in this query, only name and salary column is selected from the employees table for those employees whose salary is greater than 50000.


c -> Write a query to calculate the average salary of all employees.

    SELECT AVG(salary) as Average_Salary
    FROM employees;

explanation:  Here I have used AVG() aggregate function which will find the average value from the salary column and the new column name will be shown as "Average_Salary".


d -> Write a query to count the number of employees who work in the "Marketing" department.

    SELECT COUNT(*) as No_of_employees_in_Marketing_Dept
    FROM employees as e
    JOIN departments as d
    ON e.department_id = d.id
    WHERE d.name LIKE "Marketing";

explanation: Here I have joined employees table and departments table using JOIN where the department_id column of employees table matches with the id column of departments table. Then, I have used COUNT() aggregate function which will count the number of entries where name column of departments table matches with "Marketing". For this, I have used LIKE operator. Finally the count will be shown as No_of_employees_in_Marketing_Dept.


e -> Write a query to update the salary column of the employee with an id of 1001 to 60000.

    UPDATE employees
    SET salary = 55000
    WHERE id BETWEEN 1001 AND 60000;

explanation: Here I have used UPDATE and SET operator to update the salary column to 55000 where the employees table's id column value is between 1001 to 60000.


f -> Write a query to delete all employees whose salary is less than 30000.

    DELETE
    FROM employees
    WHERE salary < 30000;

explanation: Here I have used DELETE operator to delete entries WHERE salary column is less than 30000.



** departments table operations
--------------------------------------------------------------------------------------

a -> Write a query to select all columns and rows from the departments table.

    SELECT *
    FROM departments;

explanation: Here in this query, "SELECT *" is used to select all the rows and columns of departments table. The purpose of this query is to show all the department's record from the departments table.


b -> Write a query to select only the name and manager columns of the "Finance" department.

    SELECT name, manager
    FROM departments
    WHERE name LIKE "Finance";

explanation: Here I have used SELECT operator which will select the name and manager column from the departments table where name column is LIKE "Finance".


c -> Write a query to calculate the total number of employees in each department.

    SELECT d.name, COUNT(*)
    FROM departments as d
    JOIN employees as e
    ON d.id = e.department_id
    GROUP BY e.department_id;

explanation: Here I have joined the departments and employees table using JOIN where the department_id column of employees table matches with the id column of departments table. Then I have used COUNT() aggregate function to count and GROUP BY statement which will group rows that have same department_id. Finally, department wise employee count will be shown.


d -> Write a query to insert a new department called "Research" with a manager named "John Doe".

    INSERT INTO departments(name, manager) VALUES('Research', 'John Doe');

explanation: Here I have assumed that the department_id has AUTO_INCREMENT. Therefore, I have used INSERT INTO departments(column name) VALUES (values of correspondent columns) to insert it as new record in departments table.